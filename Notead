<?xml version="1.0" encoding="utf-8"?>
<manifest xmlns:android="http://schemas.android.com/apk/res/android"
    package="com.example.pankaj.notepp"
    android:versionCode="1"
    android:versionName="1.0" >

    <uses-sdk android:minSdkVersion="4" />

    <application
        android:label="@string/app_name" >
        <activity
            android:label="@string/app_name"
            android:name=".SimpleNote" >
            <intent-filter >
                <action android:name="android.intent.action.MAIN" />

                <category android:name="android.intent.category.LAUNCHER" />
            </intent-filter>
        </activity>
        <activity
            android:label="@string/oneNote"
            android:name=".OneNote" >
        </activity>
        <activity
            android:label="@string/oneNote"
            android:name=".CreateNote" >
        </activity>
    </application>

</manifest>
------------
package com.example.pankaj.notepp;

        import android.app.Activity;
        import android.content.Intent;
        import android.database.Cursor;
        import android.database.sqlite.SQLiteDatabase;
        import android.os.Bundle;
        import android.util.Log;
        import android.view.View;
        import android.widget.Button;
        import android.widget.EditText;
        import android.widget.Toast;

public class CreateNote extends Activity {


    private static final String TAG = "notepad";

    private Button addNoteToDB;
    private EditText titleEditText;
    private EditText contentEditText;

    //this variable will inform us if user want to create a new note or just update
    private boolean isEdit;

    private DBHelper dbhelper;
    private SQLiteDatabase db;

    //variable will contain the title of editing note
    private String editTitle;
    private int id = 0;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);

        setContentView(R.layout.createlayout);

        //binding views from layout to variable
        //quite simple, huh ? :)
        addNoteToDB = (Button) findViewById(R.id.addNoteToDB);
        titleEditText = (EditText) findViewById(R.id.TitleEditText);
        contentEditText = (EditText) findViewById(R.id.ContentEditText);

        //initialization of DBHelper
        //again :)
        //it takes context as argument
        dbhelper = new DBHelper(getApplicationContext());

        //getting the intent
        Intent mIntent = getIntent();
        //if user is editting the note we bind the title of this note to editTitle variable
        editTitle = mIntent.getStringExtra("title");
        id = mIntent.getIntExtra("id", 0);

        //we're getting the isEdit value
        //if user is editing note, the value if true
        //otherwise the default value is false
        isEdit = mIntent.getBooleanExtra("isEdit", false);

        //we're checking if user want to edit note
        if(isEdit) {
            Log.d(TAG, "isEdit");
            //getting the readable database
            db = dbhelper.getReadableDatabase();
            Cursor c = dbhelper.getNote(db, id);
            //closing db connection
            db.close();
            //here we're set title and content of note to editText views
            titleEditText.setText(c.getString(0));
            contentEditText.setText(c.getString(1));
            //and we're changing the button text to something more appropriate
            //from add note to update note
            //you can change button text in /res/values/strings.xml file
            addNoteToDB.setText(getResources().getString(R.string.updateNoteButton));
        }


        //setting listener for button
        addNoteToDB.setOnClickListener(new View.OnClickListener() {

            @Override
            public void onClick(View v) {
                //when user clicks button
                //we're grabbing the title and content from editText
                String title = titleEditText.getText().toString();
                String content = contentEditText.getText().toString();

                //if user left title or content field empty
                //we show the toast, and tell to user to fill the fields

                if (title.equals("") || content.equals("")) {
                    Toast.makeText(getApplicationContext(), getResources().getString(R.string.validation), Toast.LENGTH_LONG).show();
                    return;
                }

                //adding note to db
                if (!isEdit) {
                    //if it isn't edit mode we just add a new note to db
                    dbhelper = new DBHelper(getApplicationContext());
                    dbhelper.addNote(title, content);
                    //and finish the activity here
                    //so we came back to Simple_NotepadActivity
                    finish();
                } else {
                    //if this is edit mode, we just update the old note
                    dbhelper.updateNote(title, content, editTitle);
                    //and the same finish activity
                    finish();
                }
            }
        });
    }

    @Override
    protected void onPause() {
        super.onPause();
        dbhelper.close();
    }


}
------------
package com.example.pankaj.notepp;

import android.app.Activity;
import android.content.Intent;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.os.Bundle;
import android.util.Log;
import android.widget.TextView;

public class OneNote extends Activity {

    private static final String TAG = "notepad";

    //our views for display note title and content
    private TextView noteTitle;
    private TextView createdAt;
    private TextView noteContent;

    //dbhelper
    private DBHelper dbhelper;
    private SQLiteDatabase db;

    //default values for title and content variables
    private String title = "defaultTitle";
    private int id = 0;
    private String content = "defaultContent";
    private String date = "date";


    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);

        setContentView(R.layout.onenote);

        //initialization of DBHelper
        dbhelper = new DBHelper(getApplicationContext());


        noteTitle = (TextView) findViewById(R.id.noteTitle);
        noteContent = (TextView) findViewById(R.id.noteContent);
        createdAt = (TextView) findViewById(R.id.createdAt);

        // getting intent
        Intent mIntent = getIntent();

        id = mIntent.getIntExtra("id", 0);


        //getting the readable database
        db = dbhelper.getReadableDatabase();

        //getting the note from database
        Cursor c = dbhelper.getNote(db, id);
        //closing the database connection
        db.close();

        //getting the content from cursor
        //getString(1) because first column is noteTitle and second is noteContent and the third column is date
        title = c.getString(0).toString();
        content = c.getString(1).toString();
        date = c.getString(2).toString();

        //setting notes to our views
        noteTitle.setText(title);
        noteContent.setText(content);
        createdAt.setText(date);
    }


}
---------
package com.example.pankaj.notepp;

import java.util.ArrayList;

import android.app.Activity;
import android.content.Intent;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.os.Bundle;
import android.util.Log;
import android.view.ContextMenu;
import android.view.ContextMenu.ContextMenuInfo;
import android.view.MenuInflater;
import android.view.MenuItem;
import android.view.View;
import android.widget.AdapterView;
import android.widget.AdapterView.AdapterContextMenuInfo;
import android.widget.AdapterView.OnItemClickListener;
import android.widget.ArrayAdapter;
import android.widget.Button;
import android.widget.ListView;
import android.widget.TextView;

public class SimpleNote extends Activity implements
        OnItemClickListener {

    // Tag for debugging
    private static final String TAG = "notepad";

    // our views from layout
    private ListView noteList;
    private Button addNoteBtn;

    // adapter use to populate the listview
    private ArrayAdapter<String> adapter;
    // cursor will contain notes from database
    private Cursor notes;
    // database helper
    private DBHelper dbhelper;

    // items contain notes titles
    private ArrayList<String> titles;
    private ArrayList<Item> items;

    // variable will contain the position of clicked item in listview
    private int position = 0;

    /** Called when the activity is first created. */
    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.main);

        noteList = (ListView) findViewById(R.id.noteList);
        addNoteBtn = (Button) findViewById(R.id.addNote);

        // initialization of database helper
        dbhelper = new DBHelper(getApplicationContext());

        // setting note's titles to item in listview
        setNotes();

        // setting that longclick on listview will open the context menu
        this.registerForContextMenu(noteList);

        // onClicklistener for our "new note" button
        // click on button will open CreateNote Activity
        addNoteBtn.setOnClickListener(new View.OnClickListener() {

            @Override
            public void onClick(View v) {
                startActivity(new Intent(getApplicationContext(),
                        CreateNote.class));

            }
        });

    }

    //
    public void setNotes() {
        // init the items arrayList
        titles = new ArrayList<String>();
        items = new ArrayList<Item>();

        // getting readable database
        SQLiteDatabase db = dbhelper.getReadableDatabase();
        // getting notes from db
        // see dbhelper for more details
        notes = dbhelper.getNotes2(db);

        // this should fix the problem
        // now the activity will be managing the cursor lifecycle
        startManagingCursor(notes);

        // closing database connection !important
        // always close connection with database
        // we closing database connection here because we don't use db anymore
        db.close();

        // populating ArrayList items with notes titles
        if (notes.moveToFirst()) {
            do {
                items.add(new Item(notes.getShort(0), notes.getString(1)));
            } while (notes.moveToNext());
        }


        for (Item i : items) {
            titles.add(i.getTitle());
        }

        // creating new adapter
        adapter = new ArrayAdapter<String>(this,
                android.R.layout.simple_list_item_1, titles);
        noteList.setAdapter(adapter);
        // setting listener to the listView
        noteList.setOnItemClickListener(this);

    }

    // always when we start this activity we want to refresh the list of notes
    @Override
    protected void onResume() {
        super.onResume();
        setNotes();
    }

    // this method is called when user long clicked on listview
    @Override
    public void onCreateContextMenu(ContextMenu menu, View v,
                                    ContextMenuInfo menuInfo) {
        super.onCreateContextMenu(menu, v, menuInfo);
        // using menuInfo to determine which item of listview was clicked
        AdapterContextMenuInfo info = (AdapterContextMenuInfo) menuInfo;
        position = info.position;
        // setting the title of context menu header
        menu.setHeaderTitle(getResources().getString(R.string.CtxMenuHeader));
        // inflating the menu from xml file
        // for details see context_menu.xml file in /res/menu folder
        MenuInflater inflater = getMenuInflater();
        inflater.inflate(R.menu.context_menu, menu);

    }

    // method is called when user clicks on contextmenu item
    @Override
    public boolean onContextItemSelected(MenuItem item) {
        // getting the textView from ListView which item was clicked
        TextView tv = (TextView) noteList.getChildAt(position);
        // getting the title of this textView
        String title = tv.getText().toString();

        // performing one of actions, depending on user choice
        switch (item.getItemId()) {

            case R.id.showNote:
                Intent mIntent = new Intent(this, OneNote.class);
                mIntent.putExtra("id", items.get(position).getId());
                startActivity(mIntent);
                break;

            case R.id.editNote:
                Intent i = new Intent(this, CreateNote.class);
                i.putExtra("id", items.get(position).getId());
                Log.d(TAG, title);
                // this is important
                // we send boolean to CreateNote activity
                // thanks to this boolean activity knows that user want to edit
                // notes
                i.putExtra("isEdit", true);
                startActivity(i);
                break;

            case R.id.removeNote:
                // removing this notes
                dbhelper.removeNote(items.get(position).getId());
                // refreshing the listView
                setNotes();
                break;

        }

        return false;

    }

    // when user click on note's title we're opening this note in OneNote
    // activity
    @Override
    public void onItemClick(AdapterView<?> arg0, View arg1, int arg2, long arg3) {
        TextView tv = (TextView) arg1;
        String title = tv.getText().toString();
        Intent mIntent = new Intent(this, OneNote.class);
        mIntent.putExtra("title", title);
        mIntent.putExtra("id", items.get(arg2).getId());
        startActivity(mIntent);
    }

}
--------------
package com.example.pankaj.notepp;

public class Item {

    private int id;
    private String title;

    public Item(int id, String title) {
        this.id = id;
        this.title = title;
    }

    public int getId() {
        return id;
    }

    public String getTitle() {
        return title;
    }

}
--------------
package com.example.pankaj.notepp;

        import java.util.Date;
        import android.content.ContentValues;
        import android.content.Context;
        import android.database.Cursor;
        import android.database.sqlite.SQLiteDatabase;
        import android.database.sqlite.SQLiteOpenHelper;

public class DBHelper extends SQLiteOpenHelper {

    private Context ctx;
    //version of database
    private static final int version = 1;
    //database name
    private static final String DB_NAME = "notesDB";
    //name of table
    private static final String TABLE_NAME = "notes";
    //column names
    private static final String KEY_ID = "id";
    private static final String KEY_TITLE = "noteTitle";
    private static final String KEY_CONTENT = "noteContent";
    private static final String KEY_DATE = "date";
    //sql query to creating table in database
    private static final String CREATE_TABLE = "CREATE TABLE " + TABLE_NAME + " (id INTEGER PRIMARY KEY AUTOINCREMENT, "+KEY_TITLE+" TEXT NOT NULL, "+KEY_CONTENT+" TEXT NOT NULL, "+KEY_DATE+" TEXT);";

    //contructor of DBHelper
    public DBHelper(Context context) {
        super(context, DB_NAME, null, version);
        this.ctx = context;
    }

    //creating the table in database
    @Override
    public void onCreate(SQLiteDatabase db) {
        db.execSQL(CREATE_TABLE);
    }


    //in case of upgrade we're dropping the old table, and create the new one
    @Override
    public void onUpgrade(SQLiteDatabase db, int arg1, int arg2) {

        db.execSQL("DROP TABLE IF EXIST " + TABLE_NAME);

        onCreate(db);

    }

    //function for adding the note to database
    public void addNote(String title, String content) {
        SQLiteDatabase db = this.getWritableDatabase();

        //creating the contentValues object
        //read more here -> http://developer.android.com/reference/android/content/ContentValues.html
        ContentValues cv = new ContentValues();
        cv.put("noteTitle", title);
        cv.put("noteContent", content);
        cv.put("date", new Date().toString());

        //inserting the note to database
        db.insert(TABLE_NAME, null, cv);

        //closing the database connection
        db.close();

        //see that all database connection stuff is inside this method
        //so we don't need to open and close db connection outside this class

    }


    //getting all notes
    public Cursor getNotes(SQLiteDatabase db) {
        //db.query is like normal sql query
        //cursor contains all notes
        Cursor c = db.query(TABLE_NAME, new String[] {KEY_TITLE, KEY_CONTENT}, null, null, null, null, "id DESC");
        //moving to the first note
        c.moveToFirst();
        //and returning Cursor object
        return c;
    }

    public Cursor getNotes2(SQLiteDatabase db) {
        //db.query is like normal sql query
        //cursor contains all notes
        Cursor c = db.query(TABLE_NAME, new String[] {KEY_ID, KEY_TITLE}, null, null, null, null, "id DESC");
        //moving to the first note
        c.moveToFirst();
        //and returning Cursor object
        return c;
    }

    public Cursor getNote(SQLiteDatabase db, int id) {
        Cursor c = db.query(TABLE_NAME, new String[] {KEY_TITLE, KEY_CONTENT, KEY_DATE}, KEY_ID + " = ?", new String[] { String.valueOf(id) }, null, null, null);
        c.moveToFirst();
        return c;
    }

    public void removeNote(int id) {
        SQLiteDatabase db = getWritableDatabase();
        db.delete(TABLE_NAME, KEY_ID + " = ?", new String[] { String.valueOf(id) });
        db.close();
    }

    public void updateNote(String title, String content, String editTitle) {
        SQLiteDatabase db = this.getWritableDatabase();

        ContentValues cv = new ContentValues();
        cv.put("noteTitle", title);
        cv.put("noteContent", content);
        cv.put("date", new Date().toString());

        db.update(TABLE_NAME, cv, KEY_TITLE + " LIKE '" +  editTitle +  "'", null);

        db.close();


    }

}
------------------
<?xml version="1.0" encoding="utf-8"?>
<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="fill_parent"
    android:layout_height="fill_parent"
    android:orientation="vertical" >

    <ScrollView
        android:id="@+id/scrollView1"
        android:layout_width="fill_parent"
        android:layout_height="wrap_content" >

        <LinearLayout
            android:id="@+id/linearLayout3"
            android:layout_width="fill_parent"
            android:layout_height="wrap_content"
            android:orientation="vertical" >

            <TextView
                android:id="@+id/textView1"
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:text="@string/noteTitle"
                android:textAppearance="?android:attr/textAppearanceLarge" />

            <EditText
                android:id="@+id/TitleEditText"
                android:hint="@string/titleHint"
                android:layout_width="fill_parent"
                android:layout_height="wrap_content" >

                <requestFocus />
            </EditText>

            <TextView
                android:id="@+id/textView2"
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:text="@string/noteContent"
                android:textAppearance="?android:attr/textAppearanceLarge" />

            <EditText
                android:id="@+id/ContentEditText"
                android:layout_width="fill_parent"
                android:layout_height="wrap_content"
                android:inputType="textMultiLine"
                android:lines="4" >
            </EditText>
        </LinearLayout>
    </ScrollView>

    <Button
        android:id="@+id/addNoteToDB"
        android:layout_width="fill_parent"
        android:layout_height="wrap_content"
        android:text="@string/saveNoteButton" />

</LinearLayout>
----------------------
<?xml version="1.0" encoding="utf-8"?>
<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="fill_parent"
    android:layout_height="fill_parent"
    android:orientation="vertical" >

    <TextView
        android:id="@+id/textView1"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:layout_gravity="center"
        android:text="@string/mainHeader"
        android:textAppearance="?android:attr/textAppearanceLarge" />

    <ListView
        android:id="@+id/noteList"
        android:layout_width="fill_parent"
        android:layout_height="0dip"
        android:layout_weight="0.75"
        >
    </ListView>

    <Button
        android:id="@+id/addNote"
        android:layout_width="fill_parent"
        android:layout_height="wrap_content"
        android:text="@string/addNoteButton" />

</LinearLayout>
---------------------
<?xml version="1.0" encoding="utf-8"?>
<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="fill_parent"
    android:layout_height="fill_parent"
    android:orientation="vertical" >

    <TextView
        android:id="@+id/noteTitle"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:layout_margin="5dp"
        android:text="Large Text"
        android:textAppearance="?android:attr/textAppearanceLarge" />

    <TextView
        android:id="@+id/createdAt"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:layout_margin="5dp"
        android:text="Medium Text" />

    <TextView
        android:id="@+id/noteContent"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:layout_margin="5dp"
        android:text="TextView"
        android:textAppearance="?android:attr/textAppearanceMedium" />

</LinearLayout>
---------------------
<?xml version="1.0" encoding="utf-8"?>
<menu xmlns:android="http://schemas.android.com/apk/res/android" >
    <item android:id="@+id/showNote" android:title="@string/showNote"></item>
    <item android:id="@+id/editNote" android:title="@string/editNote"></item>
    <item android:id="@+id/removeNote" android:title="@string/removeNote"></item>



</menu>
---------------
<?xml version="1.0" encoding="utf-8"?>
<resources>

    <string name="app_name">Simple_Notepad</string>
    <string name="oneNote">NoteView</string>
    <string name="addNoteButton">New note</string>
    <string name="mainHeader">My notes</string>
    <string name="CtxMenuHeader">Choose action</string>
    <string name="updateNoteButton">Update note</string>
    <string name="validation">Please fill the title and/or content field</string>

    <!-- createview layout -->
    <string name="noteTitle">Note\'s title</string>
    <string name="noteContent">Note\'s content</string>
    <string name="saveNoteButton">Save note</string>


    <!-- context menu options -->
    <string name="showNote">Show note</string>
    <string name="editNote">Edit note</string>
    <string name="removeNote">Remove note</string>

    <string name="titleHint">Enter title here</string>

</resources>
---------------------
// Top-level build file where you can add configuration options common to all sub-projects/modules.

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:2.2.2'

        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }
}

allprojects {
    repositories {
        jcenter()
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}
--------------
apply plugin: 'com.android.application'

android {
    compileSdkVersion 25
    buildToolsVersion "25.0.0"
    defaultConfig {
        applicationId "com.example.pankaj.notepp"
        minSdkVersion 19
        targetSdkVersion 25
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    compile 'com.android.support:appcompat-v7:25.0.1'
    testCompile 'junit:junit:4.12'
}
------------------
